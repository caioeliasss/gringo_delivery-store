// src/services/webPushService.js
import antiSpamHelper from "../utils/antiSpamHelper.js";

class WebPushService {
  constructor() {
    // N√£o executar c√≥digo que depende de APIs do browser no constructor
    this.permission = "default";
    this.serviceWorkerRegistration = null;
    this.subscriptions = new Set(); // Para gerenciar m√∫ltiplas inscri√ß√µes
    this.isNotificationSupported = false;
    this.initialized = false;

    // Sistema de throttling para evitar execu√ß√µes repetidas
    this.lastStatusCheck = 0;
    this.lastDiagnostic = 0;
    this.lastInitialization = 0;
    this.statusCheckCooldown = 30000; // 30 segundos entre verifica√ß√µes
    this.diagnosticCooldown = 60000; // 1 minuto entre diagn√≥sticos
    this.initializationCooldown = 10000; // 10 segundos entre inicializa√ß√µes

    // Configurar anti-spam para este servi√ßo
    antiSpamHelper.configure({
      defaultCooldown: 10000, // 10 segundos
      maxCallsPerMinute: 5, // M√°ximo 5 chamadas por minuto
    });

    // Criar wrappers protegidos para m√©todos que podem causar spam
    this.protectedCheckStatus = antiSpamHelper.wrap(
      "webPush_checkStatus",
      this._internalCheckStatus.bind(this),
      30000 // 30 segundos entre verifica√ß√µes
    );

    this.protectedGetDiagnostics = antiSpamHelper.wrap(
      "webPush_getDiagnostics",
      this._internalGetDiagnostics.bind(this),
      60000 // 1 minuto entre diagn√≥sticos
    );

    this.protectedInitialize = antiSpamHelper.wrap(
      "webPush_initialize",
      this._internalInitialize.bind(this),
      10000 // 10 segundos entre inicializa√ß√µes
    );
  }

  // Inicializa√ß√£o lazy - s√≥ executa quando realmente for usar
  init() {
    if (this.initialized) return;

    try {
      // Verificar se estamos no browser e se Notification API est√° dispon√≠vel
      if (
        typeof window !== "undefined" &&
        typeof Notification !== "undefined"
      ) {
        this.permission = Notification.permission;
        this.isNotificationSupported = true;
      } else {
        console.warn("Notification API n√£o est√° dispon√≠vel");
        this.isNotificationSupported = false;
      }
    } catch (error) {
      console.warn("Erro ao inicializar Notification API:", error);
      this.isNotificationSupported = false;
    }

    this.initialized = true;
  }

  // Solicitar permiss√£o para notifica√ß√µes
  async requestPermission() {
    this.init(); // Garantir que est√° inicializado

    if (!this.isNotificationSupported || !("Notification" in window)) {
      console.warn("Este navegador n√£o suporta notifica√ß√µes");
      return false;
    }

    if (this.permission === "granted") {
      return true;
    }

    try {
      const permission = await Notification.requestPermission();
      this.permission = permission;

      // Se permiss√£o foi concedida, registrar service worker
      if (permission === "granted") {
        await this.registerServiceWorker();
      }

      return permission === "granted";
    } catch (error) {
      console.error("Erro ao solicitar permiss√£o de notifica√ß√£o:", error);
      return false;
    }
  }

  // Registrar Service Worker para notifica√ß√µes em background
  async registerServiceWorker() {
    if (!("serviceWorker" in navigator)) {
      console.warn("Service Workers n√£o s√£o suportados neste navegador");
      return false;
    }

    try {
      // Verificar se j√° existe um service worker registrado
      const existingRegistration =
        await navigator.serviceWorker.getRegistration("/");

      if (
        existingRegistration &&
        existingRegistration.scope === new URL("/", window.location).href
      ) {
        console.log("Service Worker j√° registrado:", existingRegistration);
        this.serviceWorkerRegistration = existingRegistration;
        return true;
      }

      // Registrar novo service worker
      const registration = await navigator.serviceWorker.register(
        "/sw-notifications.js",
        {
          scope: "/",
          updateViaCache: "none", // Garantir atualiza√ß√µes
        }
      );

      // Aguardar o service worker estar ativo
      if (registration.installing) {
        await new Promise((resolve, reject) => {
          const installingWorker = registration.installing;
          const timeout = setTimeout(() => {
            reject(new Error("Timeout aguardando ativa√ß√£o do Service Worker"));
          }, 10000); // 10 segundos timeout

          installingWorker.addEventListener("statechange", () => {
            try {
              if (installingWorker.state === "activated") {
                clearTimeout(timeout);
                resolve();
              } else if (installingWorker.state === "redundant") {
                clearTimeout(timeout);
                reject(new Error("Service Worker se tornou redundante"));
              }
            } catch (error) {
              clearTimeout(timeout);
              reject(error);
            }
          });
        });
      }

      this.serviceWorkerRegistration = registration;
      console.log("Service Worker registrado com sucesso:", registration);

      // Configurar listeners
      this.setupServiceWorkerListeners();

      return true;
    } catch (error) {
      console.error("Erro ao registrar Service Worker:", error);
      return false;
    }
  }

  // Mostrar notifica√ß√£o (melhorada)
  showNotification(title, options = {}) {
    this.init(); // Garantir que est√° inicializado

    if (!this.isNotificationSupported) {
      console.warn("Notifica√ß√µes n√£o suportadas neste dispositivo");
      return null;
    }

    if (this.permission !== "granted") {
      console.warn("Permiss√£o para notifica√ß√µes n√£o concedida");
      return null;
    }

    const defaultOptions = {
      icon: "/logo_perfil.png", // Usar logo do app
      badge: "/favicon_trim.png", // Badge do app
      image: options.image || null, // Imagem grande opcional
      vibrate: [200, 100, 200],
      requireInteraction: false,
      silent: options.silent || false, // Controle de som via silent
      tag: options.tag || "gringo-delivery", // Para agrupar notifica√ß√µes
      renotify: true,
      timestamp: Date.now(),
      data: {
        url: options.url || "/notificacoes",
        notificationId: options.notificationId,
        playSound: options.playSound !== false, // Por padr√£o toca som
        soundFile: options.soundFile || "/sounds/gringo-notification.wav",
        ...options.data,
      },
    };

    // Actions s√≥ s√£o suportadas para Service Worker notifications
    const serviceWorkerOptions = {
      ...defaultOptions,
    };

    try {
      let notification;

      // Se temos service worker, usar notifica√ß√£o via service worker
      if (this.serviceWorkerRegistration) {
        // Notifica√ß√£o via Service Worker (persiste mesmo com aba fechada)
        this.serviceWorkerRegistration.showNotification(title, {
          ...serviceWorkerOptions,
          ...options,
        });

        // Reproduzir som se solicitado e n√£o est√° silencioso
        if (defaultOptions.data.playSound && !options.silent) {
          this.playNotificationSound(defaultOptions.data.soundFile);
        }

        return true;
      } else {
        // Fallback para notifica√ß√£o normal (SEM actions) - apenas se Notification estiver dispon√≠vel
        if (
          this.isNotificationSupported &&
          typeof Notification !== "undefined"
        ) {
          notification = new Notification(title, {
            ...defaultOptions,
            ...options,
            // Remover propriedades n√£o suportadas no fallback
            actions: undefined,
            badge: undefined,
            data: undefined,
            timestamp: undefined,
            renotify: undefined,
          });

          // Reproduzir som se solicitado e n√£o est√° silencioso
          if (defaultOptions.data.playSound && !options.silent) {
            this.playNotificationSound(defaultOptions.data.soundFile);
          }
        } else {
          console.warn("Notifica√ß√µes n√£o suportadas neste dispositivo");
          return false;
        }
      }

      // Auto-close ap√≥s 8 segundos se n√£o for interativa
      if (!options.requireInteraction && notification) {
        setTimeout(() => {
          notification.close();
        }, 8000);
      }

      // Handle click para notifica√ß√£o normal
      if (notification) {
        notification.onclick = (event) => {
          event.preventDefault();
          this.handleNotificationClick(event, options);
          notification.close();
        };
      }

      return notification;
    } catch (error) {
      console.error("Erro ao mostrar notifica√ß√£o:", error);
      return null;
    }
  }

  // Reproduzir som de notifica√ß√£o
  playNotificationSound(soundFile = "/sounds/gringo-notification.wav") {
    try {
      // Verificar se √°udio √© suportado
      if (!window.Audio) {
        console.warn("Audio n√£o √© suportado neste navegador");
        return false;
      }

      const audio = new Audio(soundFile);

      // Configurar volume (0.0 a 1.0)
      audio.volume = 0.7;

      // Configurar para tocar apenas uma vez
      audio.loop = false;

      // Promessa para lidar com problemas de autoplay
      const playPromise = audio.play();

      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            console.log("üîä Som de notifica√ß√£o reproduzido:", soundFile);
          })
          .catch((error) => {
            console.warn(
              "‚ö†Ô∏è N√£o foi poss√≠vel reproduzir som (autoplay bloqueado):",
              error.name
            );
            // Em caso de falha, tentar com intera√ß√£o do usu√°rio
            if (error.name === "NotAllowedError") {
              console.log(
                "üí° Som ser√° reproduzido ap√≥s pr√≥xima intera√ß√£o do usu√°rio"
              );
              this.queueSoundForUserInteraction(soundFile);
            }
          });
      }

      return true;
    } catch (error) {
      console.error("‚ùå Erro ao reproduzir som:", error);
      return false;
    }
  }

  // Fila de sons para reproduzir ap√≥s intera√ß√£o do usu√°rio
  queueSoundForUserInteraction(soundFile) {
    if (!this.pendingSounds) {
      this.pendingSounds = [];
    }

    this.pendingSounds.push(soundFile);

    // Configurar listener para pr√≥xima intera√ß√£o (apenas uma vez)
    if (!this.userInteractionListener) {
      this.userInteractionListener = () => {
        this.playPendingSounds();
        // Remover listener ap√≥s primeira intera√ß√£o
        document.removeEventListener("click", this.userInteractionListener);
        document.removeEventListener("keydown", this.userInteractionListener);
        this.userInteractionListener = null;
      };

      document.addEventListener("click", this.userInteractionListener, {
        once: true,
      });
      document.addEventListener("keydown", this.userInteractionListener, {
        once: true,
      });
    }
  }

  // Reproduzir sons pendentes
  playPendingSounds() {
    if (!this.pendingSounds || this.pendingSounds.length === 0) return;

    // Reproduzir apenas o √∫ltimo som (evitar spam)
    const lastSound = this.pendingSounds[this.pendingSounds.length - 1];
    this.playNotificationSound(lastSound);

    // Limpar fila
    this.pendingSounds = [];
  }

  // Gerenciar cliques em notifica√ß√µes
  handleNotificationClick(event, options = {}) {
    // Focar na janela se estiver aberta
    if (window.parent) {
      window.parent.focus();
    } else {
      window.focus();
    }

    // Navegar para URL espec√≠fica ou p√°gina de notifica√ß√µes
    const targetUrl = options.url || "/notificacoes";

    if (options.openInNewTab) {
      window.open(targetUrl, "_blank");
    } else {
      // Tentar navegar na mesma aba
      if (window.location.pathname !== targetUrl) {
        window.location.href = targetUrl;
      }
    }
  }

  // Mostrar notifica√ß√£o de suporte (m√©todo espec√≠fico)
  showSupportNotification(title, options = {}) {
    const notificationTitle = title || "Nova Notifica√ß√£o de Suporte";

    const baseOptions = {
      body: options.body || options.message,
      icon: "/logo_perfil.png",
      tag: options.tag || `support-${Date.now()}`,
      requireInteraction:
        options.priority === "high" || options.requireInteraction,
      data: {
        notificationId: options.notificationId,
        type: options.type || "support",
        priority: options.priority,
        url: options.url || "/notificacoes",
        ...options.data,
      },
      // Adicionar som para notifica√ß√µes importantes
      silent: options.priority === "low" || options.silent === true,
      vibrate: this.getVibratePattern(options.type, options.priority),
    };

    // Personalizar √≠cone por tipo (apenas para Service Worker, fallback usa √≠cone padr√£o)
    if (this.serviceWorkerRegistration) {
      switch (options.type) {
        case "SUPPORT_ALERT":
        case "alert":
          baseOptions.badge = "/favicon_trim.png";
          baseOptions.requireInteraction = true;
          break;
        case "ERROR":
        case "error":
          baseOptions.badge = "/favicon_trim.png";
          baseOptions.requireInteraction = true;
          break;
        case "SYSTEM":
        case "system":
          baseOptions.badge = "/favicon_trim.png";
          break;
        default:
          baseOptions.badge = "/favicon_trim.png";
      }
    }

    return this.showNotification(notificationTitle, baseOptions);
  }

  // Obter padr√£o de vibra√ß√£o baseado no tipo e prioridade
  getVibratePattern(type, priority) {
    if (priority === "high") {
      return [300, 100, 300, 100, 300];
    }

    switch (type) {
      case "SUPPORT_ALERT":
      case "alert":
        return [300, 100, 300, 100, 300];
      case "ERROR":
      case "error":
        return [500, 200, 500];
      case "SYSTEM":
      case "system":
        return [200];
      default:
        return [200, 100, 200];
    }
  }

  // Verificar se notifica√ß√µes est√£o dispon√≠veis
  isSupported() {
    return "Notification" in window;
  }

  // Verificar se tem permiss√£o
  hasPermission() {
    this.init(); // Garantir que est√° inicializado
    return this.permission === "granted";
  }

  // Verificar status atual - m√©todo p√∫blico protegido
  async checkCurrentStatus() {
    return this.protectedCheckStatus();
  }

  // M√©todo interno para verifica√ß√£o de status
  async _internalCheckStatus() {
    const now = Date.now();

    // Verificar cache primeiro
    if (this.cachedStatus && now < this.statusCacheExpiry) {
      console.log("ÔøΩ Retornando status do cache");
      return this.cachedStatus;
    }

    console.log("üîç Verificando status das notifica√ß√µes...");

    // Atualizar permiss√£o
    this.permission = Notification.permission;

    // Verificar se existe service worker registrado
    try {
      const existingRegistration =
        await navigator.serviceWorker.getRegistration("/");
      const hasServiceWorker = !!existingRegistration;

      const status = {
        supported: this.isSupported(),
        permission: this.permission,
        hasPermission: this.hasPermission(),
        serviceWorkerRegistered: hasServiceWorker,
        isFullyConfigured: this.hasPermission() && hasServiceWorker,
        timestamp: now,
      };

      // Cachear resultado por 30 segundos
      this.cachedStatus = status;
      this.statusCacheExpiry = now + 30000;

      console.log("üìä Status das notifica√ß√µes:", status);

      if (status.isFullyConfigured && !this.serviceWorkerRegistration) {
        console.log("üîÑ Reconectando ao Service Worker...");
        this.serviceWorkerRegistration = existingRegistration;
        this.setupServiceWorkerListeners();
      }

      return status;
    } catch (error) {
      console.warn("Erro ao verificar status:", error);
      const errorStatus = {
        supported: this.isSupported(),
        permission: this.permission,
        hasPermission: this.hasPermission(),
        serviceWorkerRegistered: false,
        isFullyConfigured: false,
        error: error.message,
        timestamp: now,
      };

      this.cachedStatus = errorStatus;
      this.statusCacheExpiry = now + 10000;

      return errorStatus;
    }
  }

  // Limpar todas as notifica√ß√µes
  clearAllNotifications() {
    if (this.serviceWorkerRegistration) {
      this.serviceWorkerRegistration
        .getNotifications()
        .then((notifications) => {
          notifications.forEach((notification) => notification.close());
        });
    }
  }

  // Configurar listeners para eventos do service worker
  setupServiceWorkerListeners() {
    if (!navigator.serviceWorker) {
      console.warn("Service Worker n√£o dispon√≠vel para configurar listeners");
      return;
    }

    try {
      navigator.serviceWorker.addEventListener("message", (event) => {
        try {
          if (event.data && event.data.type === "NOTIFICATION_CLICK") {
            this.handleNotificationClick(event, event.data.options || {});
          }

          // Novo: Reproduzir som quando solicitado pelo Service Worker
          if (event.data && event.data.type === "PLAY_NOTIFICATION_SOUND") {
            const soundFile =
              event.data.soundFile || "/sounds/gringo-notification.wav";
            console.log(
              "üîä Service Worker solicitou reprodu√ß√£o de som:",
              soundFile
            );
            this.playNotificationSound(soundFile);
          }
        } catch (error) {
          console.error("Erro ao processar mensagem do Service Worker:", error);
        }
      });

      // Adicionar listener para erros do Service Worker
      navigator.serviceWorker.addEventListener("error", (error) => {
        console.error("Erro no Service Worker:", error);
      });

      console.log("‚úÖ Listeners do Service Worker configurados");
    } catch (error) {
      console.error("Erro ao configurar listeners do Service Worker:", error);
    }
  }

  // Inicializar o servi√ßo - m√©todo p√∫blico protegido
  async initialize() {
    return this.protectedInitialize();
  }

  // M√©todo interno de inicializa√ß√£o
  async _internalInitialize() {
    try {
      this.init(); // Garantir que est√° inicializado
      console.log("üîî Inicializando WebPushService...");

      // Verificar suporte
      if (!this.isSupported()) {
        console.warn("‚ùå Notifica√ß√µes n√£o s√£o suportadas neste navegador");
        return false;
      }

      // Verificar se existe uma registration existente primeiro
      try {
        const existingRegistration =
          await navigator.serviceWorker.getRegistration("/");
        if (existingRegistration) {
          console.log("üîç Service Worker existente encontrado");
          this.serviceWorkerRegistration = existingRegistration;
          this.setupServiceWorkerListeners();

          // Atualizar permiss√£o atual
          if (typeof Notification !== "undefined") {
            this.permission = Notification.permission;
          }

          if (this.permission === "granted") {
            console.log(
              "‚úÖ Reconectado ao Service Worker existente com permiss√£o"
            );
            this.initialized = true;
            return true;
          } else {
            console.log(
              "‚ö†Ô∏è Service Worker reconectado, mas sem permiss√£o de notifica√ß√£o"
            );
            this.initialized = true;
            return true;
          }
        }
      } catch (error) {
        console.warn("Erro ao verificar Service Worker existente:", error);
      }

      // Se j√° tem permiss√£o, registrar service worker
      if (this.permission === "granted") {
        console.log("‚úÖ Permiss√£o j√° concedida, registrando Service Worker...");
        const swRegistered = await this.registerServiceWorker();
        if (swRegistered) {
          this.setupServiceWorkerListeners();
          console.log("üéâ WebPushService inicializado com sucesso!");
          this.initialized = true;
          return true;
        }
      }

      console.log(
        "‚è≥ WebPushService inicializado (aguardando permiss√£o do usu√°rio)"
      );
      this.initialized = true;
      return true;
    } catch (error) {
      console.error("‚ùå Erro durante inicializa√ß√£o do WebPushService:", error);
      return false;
    }
  }

  // M√©todo conveniente para inicializar com solicita√ß√£o de permiss√£o
  async initializeWithPermissionRequest() {
    const initialized = await this.initialize();
    if (!initialized) return false;

    const hasPermission = await this.requestPermission();
    if (hasPermission) {
      console.log("üéâ WebPushService totalmente configurado!");
    }

    return hasPermission;
  }

  // Teste de notifica√ß√£o
  testNotification() {
    console.log("üß™ Testando notifica√ß√£o...");
    return this.showNotification("Teste de Notifica√ß√£o", {
      body: "Esta √© uma notifica√ß√£o de teste do Gringo Delivery!",
      requireInteraction: false,
      tag: "test-notification",
    });
  }

  // Diagn√≥stico do sistema - m√©todo p√∫blico protegido
  getDiagnostics() {
    return this.protectedGetDiagnostics();
  }

  // M√©todo interno para diagn√≥stico
  _internalGetDiagnostics() {
    const now = Date.now();

    // Verificar cache primeiro
    if (this.cachedDiagnostics && now < this.diagnosticsCacheExpiry) {
      console.log("üìã Retornando diagn√≥stico do cache");
      return this.cachedDiagnostics;
    }

    const diagnostics = {
      supported: this.isSupported(),
      permission: this.permission,
      hasPermission: this.hasPermission(),
      serviceWorkerSupported: "serviceWorker" in navigator,
      serviceWorkerRegistered: !!this.serviceWorkerRegistration,
      serviceWorkerActive: this.serviceWorkerRegistration?.active?.state,
      userAgent: navigator.userAgent,
      isSecureContext: window.isSecureContext,
      protocol: window.location.protocol,
      timestamp: now,
    };

    // Cachear diagn√≥stico por 1 minuto
    this.cachedDiagnostics = diagnostics;
    this.diagnosticsCacheExpiry = now + 60000;

    console.log("üîç Diagn√≥stico WebPushService:", diagnostics);
    return diagnostics;
  }

  // M√©todo para limpar cache e for√ßar nova verifica√ß√£o (se necess√°rio)
  clearCache() {
    this.cachedStatus = null;
    this.cachedDiagnostics = null;
    this.statusCacheExpiry = 0;
    this.diagnosticsCacheExpiry = 0;
    antiSpamHelper.clear();
    console.log("üóëÔ∏è Cache e prote√ß√£o anti-spam do WebPushService limpos");
  }

  // Obter estat√≠sticas anti-spam
  getAntiSpamStats() {
    return antiSpamHelper.getStats();
  }

  // M√©todo para verificar se est√° em cooldown
  isInCooldown(operation = "status") {
    const functionMap = {
      status: "webPush_checkStatus",
      diagnostic: "webPush_getDiagnostics",
      initialization: "webPush_initialize",
    };

    const functionName = functionMap[operation];
    if (!functionName) return false;

    return !antiSpamHelper.canExecute(functionName, 0);
  }
}

export default new WebPushService();
