// src/utils/testAntiSpam.js
// Teste para verificar se a prote√ß√£o anti-spam est√° funcionando

import webPushService from "../services/webPushService.js";

export const testAntiSpamProtection = async () => {
  console.log("üß™ Iniciando teste de prote√ß√£o anti-spam...");

  // Teste 1: Verifica√ß√µes r√°pidas consecutivas de status
  console.log("\n1Ô∏è‚É£ Testando verifica√ß√µes consecutivas de status:");
  for (let i = 0; i < 5; i++) {
    console.log(`Tentativa ${i + 1}:`);
    const result = await webPushService.checkCurrentStatus();
    console.log(result ? "‚úÖ Executado" : "‚è≥ Bloqueado");

    // Pequena pausa para ver o comportamento
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  // Teste 2: Diagn√≥sticos consecutivos
  console.log("\n2Ô∏è‚É£ Testando diagn√≥sticos consecutivos:");
  for (let i = 0; i < 3; i++) {
    console.log(`Tentativa ${i + 1}:`);
    const result = webPushService.getDiagnostics();
    console.log(result ? "‚úÖ Executado" : "‚è≥ Bloqueado");

    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  // Teste 3: Inicializa√ß√µes consecutivas
  console.log("\n3Ô∏è‚É£ Testando inicializa√ß√µes consecutivas:");
  for (let i = 0; i < 3; i++) {
    console.log(`Tentativa ${i + 1}:`);
    const result = await webPushService.initialize();
    console.log(result ? "‚úÖ Executado" : "‚è≥ Bloqueado");

    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  // Teste 4: Estat√≠sticas
  console.log("\n4Ô∏è‚É£ Estat√≠sticas anti-spam:");
  const stats = webPushService.getAntiSpamStats();
  console.table(stats);

  console.log("\n‚úÖ Teste de prote√ß√£o anti-spam conclu√≠do!");
  console.log(
    "üí° Se voc√™ viu mensagens de bloqueio, a prote√ß√£o est√° funcionando corretamente!"
  );
};

// Teste simples para usar no console
export const quickAntiSpamTest = () => {
  console.log("üß™ Teste r√°pido - executando 3 verifica√ß√µes de status:");

  for (let i = 0; i < 3; i++) {
    setTimeout(async () => {
      console.log(`Verifica√ß√£o ${i + 1}:`);
      const result = await webPushService.checkCurrentStatus();
      console.log(result ? "‚úÖ Permitido" : "‚è≥ Bloqueado");
    }, i * 500);
  }
};

// Disponibilizar no console do navegador
if (typeof window !== "undefined") {
  window.testAntiSpam = testAntiSpamProtection;
  window.quickAntiSpamTest = quickAntiSpamTest;

  console.log(`
üß™ Testes de prote√ß√£o anti-spam dispon√≠veis:
- testAntiSpam() - teste completo
- quickAntiSpamTest() - teste r√°pido
  `);
}

export default {
  testAntiSpamProtection,
  quickAntiSpamTest,
};
